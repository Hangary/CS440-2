import numpy as np
import itertools

class Variable:
    def __init__(self, no_of_runs, start_of_runs, len_of_runs, domain_of_starts):
        self.no_of_runs = no_of_runs
        self.start_of_runs = start_of_runs
        self.len_of_runs = len_of_runs
        self.domain_of_starts = domain_of_starts

    def __str__(self):
        return ("No of Runs=" + str(self.no_of_runs) +
                " ,Len of Runs=" + str(self.len_of_runs) +
                " ,Start of Runs=" + str(self.start_of_runs) +
                "\n Domain Of Starts:" + str(self.domain_of_starts))




def solve(constraints):
    """
    Implement me!!!!!!!
    This function takes in a set of constraints. The first dimension is the axis
    to which the constraints refer to. The second dimension is the list of constraints
    for some axis index pair. The third demsion is a single constraint of the form
    [i,j] which means a run of i js. For example, [4,1] would correspond to a block
    [1,1,1,1].

    The return value of this function should be a numpy array that satisfies all
    of the constraints.


	A puzzle will have the constraints of the following format:


	array([
		[list([[4, 1]]),
		 list([[1, 1], [1, 1], [1, 1]]),
         list([[3, 1], [1, 1]]),
		 list([[2, 1]]),
		 list([[1, 1], [1, 1]])],
        [list([[2, 1]]),
		 list([[1, 1], [1, 1]]),
		 list([[3, 1], [1, 1]]),
         list([[1, 1], [1, 1]]),
		 list([[5, 1]])]
		], dtype=object)

	And a corresponding solution may be:

	array([[0, 1, 1, 1, 1],
		   [1, 0, 1, 0, 1],
		   [1, 1, 1, 0, 1],
		   [0, 0, 0, 1, 1],
		   [0, 0, 1, 0, 1]])



	Consider a more complicated set of constraints for a colored nonogram.

	array([
	   [list([[1, 1], [1, 4], [1, 2], [1, 1], [1, 2], [1, 1]]),
        list([[1, 3], [1, 4], [1, 3]]),
		list([[1, 2]]),
        list([[1, 4], [1, 1]]),
		list([[2, 2], [2, 1], [1, 3]]),
        list([[1, 2], [1, 3], [1, 2]]),
		list([[2, 1]])],
       [list([[1, 3], [1, 4], [1, 2]]),
        list([[1, 1], [1, 4], [1, 2], [1, 2], [1, 1]]),
        list([[1, 4], [1, 1], [1, 2], [1, 1]]),
		list([[1, 2], [1, 1]]),
        list([[1, 1], [2, 3]]),
		list([[1, 2], [1, 3]]),
        list([[1, 1], [1, 1], [1, 2]])]],
		dtype=object)

	And a corresponding solution may be:

	array([
		   [0, 1, 4, 2, 1, 2, 1],
		   [3, 4, 0, 0, 0, 3, 0],
		   [0, 2, 0, 0, 0, 0, 0],
		   [4, 0, 0, 0, 0, 0, 1],
		   [2, 2, 1, 1, 3, 0, 0],
		   [0, 0, 2, 0, 3, 0, 2],
		   [0, 1, 1, 0, 0, 0, 0]
		 ])


    """
    rows = dim0 = len(constraints[0])
    columns = dim1 = len(constraints[1])
    print("Dim0: " + str(dim0))
    print("Dim1: " + str(dim1))
    np_constraints = np.array(constraints)
    #print(np_constraints)

    row_constraints = constraints[0]
    column_constraints = constraints[1]
    print("Row Constraints: " + str(row_constraints))
    print("Column Constraints: " + str(column_constraints))

    Variables = {}
    Row_Variables = {}
    Col_Variables = {}
    Variables["ROW"] = Row_Variables
    Variables["COL"] = Col_Variables

    iterator = 0
    for each_run_set in row_constraints:
        print("Each Row Run Set:" + str(each_run_set))
        no_of_runs = len(each_run_set)
        start_of_runs = []
        len_of_runs = []
        domain_of_starts = []
        total_length = 0
        run_lengths = [a[0] for a in each_run_set]
        # print(run_lengths)
        run_iter = 0
        for each_run in each_run_set:
            print("Each Run:" + str(each_run))
            run_length = each_run[0]
            len_of_runs.append(run_length)
            each_domain_of_start = []
            for i in range(total_length, columns - sum(run_lengths[run_iter:]) + 1):
                each_domain_of_start.append(i)
            domain_of_starts.append(each_domain_of_start)
            total_length += run_length
            run_iter += 1
        Row_Variables[iterator] = Variable(no_of_runs,start_of_runs,len_of_runs, domain_of_starts)
        iterator += 1

    iterator = 0
    for each_run_set in column_constraints:
        print("Each Col Run Set:" + str(each_run_set))
        no_of_runs = len(each_run_set)
        start_of_runs = []
        len_of_runs = []
        domain_of_starts = []
        total_length = 0
        for each_run in each_run_set:
            print("Each Run:" + str(each_run))
            run_length = each_run[0]
            len_of_runs.append(run_length)
            each_domain_of_start = []
            for i in range(total_length, rows - run_length + 1):
                each_domain_of_start.append(i)
            domain_of_starts.append(each_domain_of_start)
            total_length += run_length
        Col_Variables[iterator] = Variable(no_of_runs, start_of_runs, len_of_runs, domain_of_starts)
        iterator += 1

    print("\nROWS")
    print_map(Variables["ROW"])
    print("\nCOLUMNS")
    print_map(Variables["COL"])

    Final_Variables = Backtrack(Variables, 0, rows)

    print("\nROWS")
    print_map(Final_Variables["ROW"])
    print("\nCOLUMNS")
    print_map(Final_Variables["COL"])

    return np.random.randint(2, size=(dim0, dim1))

def create_permutations(lengths, domain_of_starts):
    combinations = []
    all_combinations = list(itertools.product(*domain_of_starts))
    print("ALL combinations:", end='')
    print(all_combinations)
    for each_combination in all_combinations:
        if is_node_consistent(lengths, each_combination):
            print(each_combination)
            combinations.append(each_combination)
    return combinations


def is_node_consistent(lengths, each_combination):
    for i in range(len(each_combination)-1):
        if each_combination[i] + lengths[i] >= each_combination[i+1]:
            return False
    return True




def Backtrack(Variables, index, rows):
    print("Index:" + str(index))
    if index == rows:
        return Variables
    current_row_variable = Variables["ROW"][index]
    print(current_row_variable)
    lengths = current_row_variable.len_of_runs
    domains = current_row_variable.domain_of_starts
    perms = create_permutations(lengths, domains)
    for each_permutation in perms:
        print("Checking " + str(each_permutation))
        columns_consistent = reduce_column_consistencies(Variables, index, lengths, each_permutation)
        if columns_consistent:
            domain_of_starts = []
            for each_value in each_permutation:
                domain_of_starts.append([each_value])
            new_row_variable = Variable(current_row_variable.no_of_runs, [], current_row_variable.len_of_runs, domain_of_starts)
            Variables["ROW"][index] = new_row_variable
            return Backtrack(Variables, index+1, rows)




    # for each_domain_start in current_row_variable.domain_of_starts:
    #     print(each_domain_start)

def reduce_column_consistencies(Variables, index, lengths, permutation):
    #print("lengths:" + str(lengths))

    must_be_filled = []
    for i in range(len(permutation)):
        perm_i = permutation[i]
        #print("perm_i:" + str(perm_i))
        len_j = lengths[i]
        for j in range(len_j):
            #print("j:" + str(j))
            #print("adding:" + str(perm_i+j))
            must_be_filled.append(perm_i+j)
    print("Must Fill columns:" + str(must_be_filled) + " for this index" + str(index))

    for each_column in must_be_filled:
        column_variable = Variables["COL"][each_column]
        #print("Col Var:" + str(column_variable))
        domain_of_starts = column_variable.domain_of_starts
        column_lengths = column_variable.len_of_runs
        perms = create_permutations(column_lengths,domain_of_starts)
        for each_perm in perms:
            if



    return True




# def Backtrack(Variables):
#     if is_consistent(Variables):
#         return Variables
#     var = select_unassigned_variable(Variables)
#     for each_value in order_domain_values(var, Variables):
#         new_variables = modify_variable(var, Variables)
#         if is_consistent(new_variables):
#             return new_variables
#         result = Backtrack(new_variables)
#         if


def print_map(Dictionary):
    for k, v in Dictionary.items():
        print("\nK:" + str(k) + " ==>  " + str(v))
